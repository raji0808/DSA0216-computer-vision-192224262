import cv2
import numpy as np
import matplotlib.pyplot as plt

def build_gabor_filters():
    filters = []
    ksize = 31
    for theta in np.arange(0, np.pi, np.pi / 4):  # Vary orientation
        for lambd in np.arange(5, 20, 5):  # Vary wavelength
            kern = cv2.getGaborKernel((ksize, ksize), 4.0, theta, lambd, 0.5, 0, ktype=cv2.CV_32F)
            filters.append(kern)
    return filters

def apply_filters(img, filters):
    responses = []
    for kern in filters:
        filtered_img = cv2.filter2D(img, cv2.CV_8UC3, kern)
        responses.append(filtered_img)
    return responses

def combine_responses(responses):
    combined_response = np.zeros_like(responses[0])
    for response in responses:
        np.maximum(combined_response, response, combined_response)
    return combined_response

def segment_texture(image_path):
    # Load the image
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Build Gabor filters
    filters = build_gabor_filters()

    # Apply filters to the image
    responses = apply_filters(image, filters)

    # Combine filter responses
    combined_response = combine_responses(responses)

    # Normalize the combined response
    combined_response = cv2.normalize(combined_response, None, 0, 255, cv2.NORM_MINMAX)

    # Apply thresholding
    _, segmented_image = cv2.threshold(combined_response, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Display results
    plt.figure(figsize=(10, 10))
    plt.subplot(1, 3, 1)
    plt.title('Original Image')
    plt.imshow(image, cmap='gray')
    plt.subplot(1, 3, 2)
    plt.title('Combined Gabor Response')
    plt.imshow(combined_response, cmap='gray')
    plt.subplot(1, 3, 3)
    plt.title('Segmented Image')
    plt.imshow(segmented_image, cmap='gray')
    plt.show()

# Path to the image
image_path = r'C:\Users\HP\Pictures\Screenshots\Screenshot (300).png'

# Perform texture segmentation
segment_texture(image_path)
