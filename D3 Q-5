import cv2
import numpy as np

# Load the images
image_path = r'C:\Users\HP\Pictures\Screenshots\Screenshot (300).png'
template_path = 'path_to_template.jpg'
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
template = cv2.imread(template_path, cv2.IMREAD_GRAYSCALE)

# Initialize the SIFT detector
sift = cv2.SIFT_create()

# Find the keypoints and descriptors with SIFT
keypoints_image, descriptors_image = sift.detectAndCompute(image, None)
keypoints_template, descriptors_template = sift.detectAndCompute(template, None)

# Use FLANN based matcher
FLANN_INDEX_KDTREE = 1
index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
search_params = dict(checks=50)  # or pass empty dictionary

flann = cv2.FlannBasedMatcher(index_params, search_params)
matches = flann.knnMatch(descriptors_template, descriptors_image, k=2)

# Store all the good matches as per Lowe's ratio test.
good_matches = []
for m, n in matches:
    if m.distance < 0.7 * n.distance:
        good_matches.append(m)

# Draw matches
matched_image = cv2.drawMatches(template, keypoints_template, image, keypoints_image, good_matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

# Display the result
cv2.imshow('Matched Features', matched_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
